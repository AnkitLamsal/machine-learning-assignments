# -*- coding: utf-8 -*-
"""mushroom_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bZ4UTp387K7V3DIqBvvj4A0fpj_bg_EL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/mushrooms.csv')

df.head()

df.describe(include="O")

df.info()

columns = df.columns

le = LabelEncoder()

for col in columns:
    df[col] = le.fit_transform(df[col])

X = df.drop("class", axis = 1)

X.head()

y = df['class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify=y, 
                                                    random_state =1111)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors = 3)

knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

from sklearn.metrics import (accuracy_score, f1_score, precision_score, 
                             recall_score, roc_auc_score, 
                             classification_report, confusion_matrix)

def cal_score(y_true, y_pred):
    auc = roc_auc_score(y_true, y_pred)
    print("AUC:"+str(auc))
    f1 = f1_score(y_true, y_pred)
    print("f1 Score:"+str(f1))
    precision = precision_score(y_true, y_pred)
    print("Precision:"+str(precision))
    recall = recall_score(y_true, y_pred)
    print("Recall:"+ str(recall))
    accuracy = accuracy_score(y_true, y_pred)
    print("Accuracy:"+str(accuracy))
    report = classification_report(y_true, y_pred)
    print(f"Classification Report: {report}")
    matrix = confusion_matrix(y_true, y_pred)
    print(f"Confusion Matrix : {matrix}")

cal_score(y_test, y_pred)

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()
lr.fit(X_train, y_train)

y_pred = lr.predict(X_test)

cal_score(y_test, y_pred)



